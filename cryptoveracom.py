import hashlib
import random
import string
import datetime

def generate_random_wallet():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ (—Ñ–µ–π–∫–æ–≤—ã–π)"""
    return '0x' + ''.join(random.choices('abcdef' + string.digits, k=40))

def verify_wallet_address(address):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ (—ç–º—É–ª—è—Ü–∏—è)"""
    if not address.startswith("0x") or len(address) != 42:
        return False
    return all(c in string.hexdigits for c in address[2:])

def generate_address_proof(address):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è' ‚Äî —Ö—ç—à + –ø–æ–¥–ø–∏—Å—å (—ç–º—É–ª—è—Ü–∏—è)"""
    timestamp = datetime.datetime.utcnow().isoformat()
    raw = f"{address}|{timestamp}|secret_key_simulated"
    return hashlib.sha256(raw.encode()).hexdigest()

def main():
    address = generate_random_wallet()
    print(f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–¥—Ä–µ—Å: {address}")

    if verify_wallet_address(address):
        print("‚úÖ –ê–¥—Ä–µ—Å –≤–∞–ª–∏–¥–µ–Ω")
        proof = generate_address_proof(address)
        print(f"üìé –ü—Å–µ–≤–¥–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è: {proof}")
    else:
        print("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")

if __name__ == "__main__":
    main()
